@page "/"
@if(Lots.Count==0)
            {
                <p>Loading Lots...</p>
}
else
{
    foreach (var item in BuyedCurrencyList)
    {
        <p class="text-success">@item</p>
    }
    <h3 class="text-danger">@errorOperation</h3>
    <button type="button"
            class="btn btn-primary me-3 mb-3"
            data-bs-toggle="modal"
            data-bs-target="#exampleModal">
        Add lot
        
    </button>
    <button @onclick="Refresh" type="button" class="btn btn-info">Refresh</button>
    <p class="text-info">Refreshed @RefreshCount times</p>

    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Add Lot</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm id="addLotForm" Model="LotToAdd" OnInvalidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="border rounded" mb-3>
                            <InputRadioGroup @bind-Value="LotToAdd.Currency" class="form-control">
                                @foreach (Currency item in Enum.GetValues(typeof(Currency)))
                                    {
                                    <div class="form-check">
                                        <InputRadio Value="item" class="form-check-input" />
                                        <label class="form-check-label">@item</label>
                                    </div>
                                    }

                            </InputRadioGroup>
                            <ValidationMessage For="@(()=>LotToAdd.Currency)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Amount</label>
                            <InputNumber @bind-Value="LotToAdd.Amount" class="form-control" />
                            <ValidationMessage For="@(()=>LotToAdd.Amount)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Seller</label>
                            <InputText @bind-Value="LotToAdd.Seller" class="form-control" />
                            <ValidationMessage For="@(()=>LotToAdd.Seller)" />
                        </div>


                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" form="addLotForm" class="btn btn-primary">Add Lot</button>
                </div>
            </div>
        </div>

    </div>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Currency</th>
                <th scope="col">Amount</th>
                <th scope="col">Seller</th>
                <th scope="col">MessageId</th>
                <th scope="col">PopReceipt</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (LotGetModel lot in Lots)
            {
                <tr>
                    <td scope="row">@lot.Currency</td>
                    <td scope="row">@lot.Amount</td>
                    <td scope="row">@lot.Seller</td>
                    <td scope="row">@lot.MessageId</td>
                    <td scope="row">@lot.PopReceipt</td>
                    <td scope="row">
                        <button @onclick="(()=> BuyCurrency(lot))" class="btn btn-primary">Buy</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    public List<LotGetModel> Lots { get; set; } = new List<LotGetModel>();
    public LotAddModel LotToAdd { get; set; } = new LotAddModel();
    [Inject]
    public LotHttpService LotHttpService { get; set; }
    private List<string> BuyedCurrencyList = new List<string>();
    public int RefreshCount { get; set; }
    private string errorOperation = "";
    private System.Threading.Timer timer;
    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(
            callback: async (object stateInfo) =>
            {
                await Refresh();
            },
            new System.Threading.AutoResetEvent(false),
            dueTime: 0,
            period: 5);
    }

    private async Task BuyCurrency(LotGetModel lotGetModel)
    {
        ApiResponseModel result = await LotHttpService
        .BuyLot(lotGetModel.MessageId, lotGetModel.PopReceipt);
        if(result.StatusCode==204)
        {
            Lots.Remove(lotGetModel);
            BuyedCurrencyList.Add($"Currency{lotGetModel.Currency}={lotGetModel.Amount}"+
                $" was buyed. Seller - {lotGetModel.Seller}");
        }
        else
        {
            errorOperation = result.ErrorMessage;
        }

    }

    private async Task HandleValidSubmit()
    {
        LotGetModel result = await LotHttpService.AddLot(LotToAdd);
        if(result is not null)
        {
            Lots.Add(result);
        }
    }
    private async Task Refresh()
    {
        Lots = await LotHttpService.GetLots();
        RefreshCount++;
        StateHasChanged();
    }
}
